# # Fetch all hosts in us-east-1, the hostname is the public DNS if it exists, otherwise the private IP address
# plugin: aws_ec2
# regions:
#   - us-east-1

# # Example using filters, ignoring permission errors, and specifying the hostname precedence
# plugin: aws_ec2
# # The values for profile, access key, secret key and token can be hardcoded like:
# boto_profile: aws_profile
# # or you could use Jinja as:
# # boto_profile: "{{ lookup('env', 'AWS_PROFILE') | default('aws_profile', true) }}"
# # Populate inventory with instances in these regions
# regions:
#   - us-east-1
#   - us-east-2
# filters:
#   # All instances with their `Environment` tag set to `dev`
#   tag:Environment: dev
#   # All dev and QA hosts
#   tag:Environment:
#     - dev
#     - qa
#   instance.group-id: sg-xxxxxxxx
# # Ignores 403 errors rather than failing
# strict_permissions: False
# # Note: I(hostnames) sets the inventory_hostname. To modify ansible_host without modifying
# # inventory_hostname use compose (see example below).
# hostnames:
#   - tag:Name=Tag1,Name=Tag2  # Return specific hosts only
#   - tag:CustomDNSName
#   - dns-name
#   - name: 'tag:Name=Tag1,Name=Tag2'
#   - name: 'private-ip-address'
#     separator: '_'
#     prefix: 'tag:Name'

# # Example using constructed features to create groups and set ansible_host
# plugin: aws_ec2
# regions:
#   - us-east-1
#   - us-west-1
# # keyed_groups may be used to create custom groups
# strict: False
# keyed_groups:
#   # Add e.g. x86_64 hosts to an arch_x86_64 group
#   - prefix: arch
#     key: 'architecture'
#   # Add hosts to tag_Name_Value groups for each Name/Value tag pair
#   - prefix: tag
#     key: tags
#   # Add hosts to e.g. instance_type_z3_tiny
#   - prefix: instance_type
#     key: instance_type
#   # Create security_groups_sg_abcd1234 group for each SG
#   - key: 'security_groups|json_query("[].group_id")'
#     prefix: 'security_groups'
#   # Create a group for each value of the Application tag
#   - key: tags.Application
#     separator: ''
#   # Create a group per region e.g. aws_region_us_east_2
#   - key: placement.region
#     prefix: aws_region
#   # Create a group (or groups) based on the value of a custom tag "Role" and add them to a metagroup called "project"
#   - key: tags['Role']
#     prefix: foo
#     parent_group: "project"
# # Set individual variables with compose
# compose:
#   # Use the private IP address to connect to the host
#   # (note: this does not modify inventory_hostname, which is set via I(hostnames))
#   ansible_host: private_ip_address

# Example using include_filters and exclude_filters to compose the inventory.
plugin: aws_ec2
regions:
  - us-east-2
keyed_groups:
- key: tags.Nodes

